James Hall
Lecture Assigment 1
CECS 327

1.  How might the clocks in two computers that are linked by a local network be synchronized without reference to an external time source? What factors limit the accuracy of the procedure you have described? How could the clocks in a large number of computers connected by the Internet be synchronized? Discuss the accuracy of that procedure.

Response:
   If the network contains several computers than one of the computers can be designated to act as the time server and could use something like Christian's protocol. As with all networks, you are limited by distance and physical connections. The time it would take to pass messages through the network would vary and degrade accuracy. The computers in the network would also be fighting for who gets to access the time server first.

2. Give an example of an HTTP URL. List the main components of an HTTP URL, stating how their boundaries are denoted and illustrating each one from your example. To what extent is an HTTP URL location- transparent?

Response:
   Url: http://something.com/somethingelse/index.html
1) http: <- HyperText Transfer Protocol
2) The first part between the // and / is the Domain name of the Web Server
3) everything else is reference to the file in that directory

3. Describe and illustrate the client-server architecture of one or more major Internet applications (for example the Web, email or netnews).

Response:
Everything in the internet is one computer talking to another. A client talks to a server by connecting to it through a DNS server. The DNS server holds a record of the ip addresses that contain the server's actual address. Once the client has connected through DNS it can access the server

4. Give examples of applications where the use of mobile code is beneficial.

Response:
User computation, Browser Enchancment, and cases where process need to be computed and returned to the user.

5. Consider two communication services for use in asynchronous distributed systems. In service A, messages may be lost, duplicated or delayed and checksums apply only to headers. In service B, messages may be lost, delayed or delivered too fast for the recipient to handle them, but those that are delivered arrive with the correct contents.Describe the classes of failure exhibited by each service. Classify their failures according to their effect on the properties of validity and integrity. Can service B be described as a reliable communication service?

Response:
Class of Failure        Affects        Description

Fail-stop               Process        Process halts and remains halted. Other processes may detect this state.

Crash                   Process       Process halts and remains halted. Other processes may                                   not be able to detect this state.

Omission                Channel       A message inserted in an outgoing message buffer never
                                       arrives at the other end’s incoming message buffer.

Send-Omission           Process       A process completes a send operation but the message is
                                       not put in its outgoing message buffer.

Receive-Omission        Process       A message is put in a process’s incoming message
                                       buffer, but that process does not receive it.

Arbitrary  (Byzantine)  Process or Channel  Process/channel exhibits arbitrary behaviour: it
                                             may send/transmit arbitrary messages at arbitrary times or commit omissions; a process may stop or take an incorrect step.
* NO service B is not reliable communication service

6. Suppose that a basic disk read can sometimes read values that are different from those written. State the type of failure exhibited by a basic disk read. Suggest how this failure may be masked in order to produce a different benign form of failure. Now suggest how to mask the benign failure.

Response:
So first need to look up failures of basic disk reads. The types of errors you can have are incorrect values detected if the wrong values are read against the checksum then an omission failure is returned.

7. Define the integrity property of reliable communication and list all the possible threats to integrity from users and from system components. What measures can be taken to ensure the integrity property in the face of each of these sources of threats.

Response:
From the book:
Integrity - a message received is identical to the one sent and no messages are delivered twice.
The threats to integrity come from two independent sources:
- Any protocol that retransmits messages but does not reject a message that arrives twice. Protocols can attach sequence numbers to messages so as to detect those that are delivered twice.
- Malicious users that may inject spurious messages, replay old messages or tamper with messages. Security measures can be taken to maintain the integrity property in teh face of such attacks.
For threats from system components. Checksums are used to detect corrupted messages.

8. A client sends a 200 byte request message to a service, which produces a response containing 5000 bytes. Estimate the total time to complete the request in each of the following cases, with the performance assumptions listed below:

i) Using connectionless (datagram) communication (for example, UDP);

UDP: 5 + 2000/10000 + 2 + 5(5 + 10000/10000) = 37.2 miliseconds

ii) Using connection-oriented communication (for example, TCP);

TCP: 5 + 5 + 2000/10000 + 2 + 5(5 + 10000/10000) = 42.2 milliseconds

iii) The server process is in the same machine as the client.
 Latency per packet (local or remote, incurred on both send and receive): 5 ms
 Connection setup time (TCP only): 5 ms
 Data transfer rate: 10 Mbps
 MTU: 1000 bytes
 Server request processing time: 2 ms
 Assume that the network is lightly loaded.

 Data transfer rate at 40/megabits/second. latency/message ~5 miliseconds. Time for server call:

 5 + 2000/40000 + 5 + 50000/40000 = 11.3 milliseconds

9. A specific problem that must be solved in remote terminal access protocols such as Telnet is the need to transmit exceptional events such as kill signals’ from the terminal’ to the host in advance of previously- transmitted data. Kill signals should reach their destination ahead of any other ongoing transmissions. Discuss the solution of this problem with connection-oriented and connectionless protocols. page 122

Response:
In TCP a mechanism called URGENT is used to bypass any flow-control. With this mechanism the anything received will be read immediately.

10. What are the disadvantages of using network-level broadcasting to locate resources:
i) in a single Ethernet?
If you use a single Ethernet everything must be handled by the OS or some other process.
ii) in an intranet? To what extent is Ethernet multicast an improvement on broadcasting?
In general you want to stay away from broadcasting, it has a high overhead. It is possible to broadcast with Intranet

*11. Devise a scenario in which multicasts sent by different clients are delivered in different orders at two group members. Assume that some form of message retransmissions are in use, but that messages that are not dropped arrive in sender ordering. Suggest how recipients might remedy this situation.

- client1 sends request "ping1" to all the subscribers we will say, "server1 and server2", but Server2 is dropped
- client2 sends another request "ping2" to all the servers and they all the servers receive it.
- client1 attempts to send "ping1" again to server and it delivers.
- server1 receives the messages in "ping1" then "ping2", but server 2 receives them "ping2" then "ping1"
this could be fixed a number of ways such as including timestamps or wait for confirmation of each message, and order correctly.

12. A request-reply protocol is implemented over a communication service with omission failures to provide at-least-once RMI invocation semantics. In the first case the implementor assumes an asynchronous distributed system. In the second case the implementor assumes that the maximum time for the communication and the execution of a remote method is T. In what way does the latter assumption simplify the implementation?

Response:
First case:
Asynchronous meaning it's non-blocking once the message is sent across to the server, the client isn't aware of what happens to it unless the server sends a response back. It's up to the programmers to design how the client and server should response to avoid omissions failures. The answer below goes into a little more detail.

Second case:
In web development there is a http-status code known 504 gateway timeout, but both the creator of the client and server have to agree on how to deal with this. If a request doesn't reach the server you can always try again. The omission failure should be observed by the client.


*13. In the context of a group communication service, provide example message exchanges that illustrate the difference between causal and total ordering.

Response:


14. A “null” RMI that takes no parameters, calls an empty procedure and returns no values delays the caller for 2.0 milliseconds. Explain what contributes to this time. In the same RMI system, each 1K of user data adds an extra 1.5 milliseconds. A client wishes to fetch 32K of data from a file server. Should it use one 32K RMI or 32 1K RMIs?

Response:

One larger RMI is cheaper because the overhead is still the same so you might as well send all the data.

15*. A client makes RMIs to a server. The client takes 5 ms to compute the arguments for each request, and the server takes 10ms to process each request. The local OS processing time for each send or receive operation is 0.5 ms, and the network time to transmit each request or reply message is 3 ms. Marshalling or unmarshalling takes 0.5 ms per message. Estimate the time taken by the client to generate and return from 2 requests
Response:
(i) if it is single-threaded, and
 2(5 (prepare) + 4(0.5 (marshelling/unmarshelling) + 0.5 (local-OS)) + 2*3 (net)) + 10 (server)) = 50 ms.

(ii)* if it has two threads which can make requests concurrently on a single processor. Is there a need for asynchronous RMI if processes are multi-threaded?
5 + (0.5+0.5+3) + (0.5+0.5+10+0.5+0.5) + (0.5+0.5+10+0.5+0.5) + (3 + 0.5+0.5) = 37ms.
